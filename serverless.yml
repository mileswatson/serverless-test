
# name of the service
service: csboost-backend

# locks service to only deploy with Serverless V2
frameworkVersion: '2'

# specifies the cloud provider
provider:

  # use AWS (as opposed to google, azure etc.)
  name: aws

  # default stage is 'dev', but can be overriden with the --stage option
  stage: ${opt:stage, 'dev'}
  # default region is London
  region: eu-west-2

  # .NET 5 requires a container image, sticking to 3.1 for now
  runtime: dotnetcore3.1
  # allocated memory (MB) to each function
  memorySize: 1024
  # set a timeout of 1 second
  timeout: 3

  # removes deprecation warning
  lambdaHashingVersion: 20201221

  httpApi:
    # e.g. dev-backend
    name: ${self:service}-${self:provider.stage}
    # supports better request / response datatypes
    payload: '2.0'


package:
  # we are using a compiled language, so we have to package the binary
  # with all function deployments
  artifact: Lambda/bin/Release/netcoreapp3.1/Lambda.zip


plugins:
  # allows for HTTP API throttling
  - serverless-apigateway-route-settings
  # function specific roles
  - serverless-iam-roles-per-function


custom:

  # default settings for all API paths
  routeSettings:
    # max 10 requests a second
    rateLimit: 10
    # max 5 requests at a time
    burstLimit: 5
    # enabling this costs money
    detailedMetricsEnabled: false
  
  # for storing secrets
  secrets: ${file(./secrets.yml)}

  # table names
  dynamodb:
    demoTable: ${self:service}-demo-${self:provider.stage}


resources:
  Resources:
    demoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb.demoTable}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

functions:

  # basic lambda function
  root:
    # prefix the name with the stage, to help distinguish between stages.
    name: ${self:provider.stage}-root
    # <assembly_name>::<namespace>.<class>::<function>
    handler: Lambda::Functions.Handler::Handle

    events:
      # create an api that calls the function
      - httpApi:
          path: /
          method: GET

  hello:
    name: ${self:provider.stage}-hello
    handler: Lambda::Functions.Hello.Handler::Handle
    events:
      - httpApi:
          path: /hello
          method: GET

  cookie:
    name: ${self:provider.stage}-cookie
    handler: Lambda::Functions.Cookie.Handler::Handle
    events:
      - httpApi:
          path: /cookie
          method: GET

  secret:
    name: ${self:provider.stage}-secret
    handler: Lambda::Functions.Secret.Handler::Handle
    environment:
      PASETO_KEY: ${self:custom.secrets.PASETO_KEY}
    events:
      - httpApi:
          path: /secret
          method: GET

  dynamo:
    name: ${self:provider.stage}-dynamo
    handler: Lambda::Functions.Dynamo.Handler::Handle
    environment:
      DEMO_TABLE: ${self:custom.dynamodb.demoTable}
    events:
      - httpApi:
          path: /dynamo
          method: GET
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${self:custom.secrets.ACCOUNT_ID}:table/${self:custom.dynamodb.demoTable}
          - arn:aws:dynamodb:${self:provider.region}:${self:custom.secrets.ACCOUNT_ID}:table/${self:custom.dynamodb.demoTable}/index/pk
